/* 
 * Copyright 2019 Matt Jamesson <scifidryer@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package modbusmechanic;

import com.intelligt.modbus.jlibmodbus.net.*;
import com.intelligt.modbus.jlibmodbus.msg.*;
import com.intelligt.modbus.jlibmodbus.exception.*;
import com.intelligt.modbus.jlibmodbus.utils.DataUtils;
import com.intelligt.modbus.jlibmodbus.msg.base.*;
import com.intelligt.modbus.jlibmodbus.msg.response.*;
import com.intelligt.modbus.jlibmodbus.serial.*;
import javax.xml.bind.DatatypeConverter;
import javax.swing.*;
import jssc.SerialPortList;
/**
 *
 * @author Matt Jamesson
 */
public class PacketFrame extends javax.swing.JFrame {

    /**
     * Creates new form PacketFrame
     */
    public ModbusResponse lastResponse = null;
    public int lastResponseType = 0;
    public int lastFunctionCode = 0;
    public int mediumType = 0;
    public PacketFrame()
    {
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(PacketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(PacketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(PacketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(PacketFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        
        initComponents();
        functionSelector.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        destHostField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        slaveNodeField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        transactionField = new javax.swing.JTextField();
        protoIdField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        registerField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        transmitPacketButton = new javax.swing.JButton();
        customMessageButton = new javax.swing.JRadioButton();
        readFloatButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        responseField = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        functionSelector = new javax.swing.JComboBox<>();
        functionCodeField = new javax.swing.JTextField();
        asciiReadButton = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        byteSwapCheckbox = new javax.swing.JCheckBox();
        wordSwapCheckbox = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        rawTextBox = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        u16ReadButton = new javax.swing.JRadioButton();
        u32ReadButton = new javax.swing.JRadioButton();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        tcpMsgButton = new javax.swing.JRadioButton();
        rtuMsgButton = new javax.swing.JRadioButton();
        comPortSelector = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        baudRateSelector = new javax.swing.JComboBox<>();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        paritySelector = new javax.swing.JComboBox<>();
        serialMonitorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modbus Mechanic");

        jLabel1.setText("IP");

        destHostField.setColumns(12);
        destHostField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destHostFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Slave Node");

        slaveNodeField.setColumns(3);

        jLabel3.setText("Transaction");

        jLabel4.setText("Protocol ID");

        transactionField.setColumns(5);
        transactionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionFieldActionPerformed(evt);
            }
        });

        protoIdField.setColumns(5);

        jLabel5.setText("Function");

        jLabel6.setText("Register");

        registerField.setColumns(4);

        jLabel7.setText("Quantity");

        quantityField.setColumns(2);

        transmitPacketButton.setText("Transmit packet");
        transmitPacketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transmitPacketButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(customMessageButton);
        customMessageButton.setSelected(true);
        customMessageButton.setText("Custom");
        customMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customMessageButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(readFloatButton);
        readFloatButton.setText("Read Float");
        readFloatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFloatButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Meassage type");

        responseField.setText("Response value: ");

        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        functionSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Read Holding Registers (0x03)", "Read Input Registers (0x04)" }));
        functionSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionSelectorActionPerformed(evt);
            }
        });
        jLayeredPane1.add(functionSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 250, -1));

        functionCodeField.setColumns(3);
        jLayeredPane1.add(functionCodeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        buttonGroup1.add(asciiReadButton);
        asciiReadButton.setText("Read ASCII");
        asciiReadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asciiReadButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Interpretation options");

        byteSwapCheckbox.setText("Byte Swap");
        byteSwapCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byteSwapCheckboxActionPerformed(evt);
            }
        });

        wordSwapCheckbox.setText("Word Swap");
        wordSwapCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordSwapCheckboxActionPerformed(evt);
            }
        });

        rawTextBox.setColumns(20);
        rawTextBox.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        rawTextBox.setRows(5);
        jScrollPane1.setViewportView(rawTextBox);

        jLabel10.setText("Raw packet:");

        buttonGroup1.add(u16ReadButton);
        u16ReadButton.setText("Read U16");
        u16ReadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                u16ReadButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(u32ReadButton);
        u32ReadButton.setText("Read U32");
        u32ReadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                u32ReadButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Type:");

        buttonGroup2.add(tcpMsgButton);
        tcpMsgButton.setSelected(true);
        tcpMsgButton.setText("TCP");
        tcpMsgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcpMsgButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(rtuMsgButton);
        rtuMsgButton.setText("RTU");
        rtuMsgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtuMsgButtonActionPerformed(evt);
            }
        });

        comPortSelector.setModel(new DefaultComboBoxModel(SerialPortList.getPortNames()));

        jLabel12.setText("Port");

        jLabel13.setText("Baud");

        baudRateSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4800", "9600", "14400", "19200", "38400", "57600" }));

        jLabel14.setText("Serial settings");

        jLabel15.setText("Data bits");

        jTextField1.setColumns(2);
        jTextField1.setText("8");

        jLabel16.setText("Stop bits");

        jTextField2.setColumns(2);
        jTextField2.setText("1");

        jLabel17.setText("Parity");

        paritySelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Odd", "Even", "Mark", "Space" }));
        paritySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paritySelectorActionPerformed(evt);
            }
        });

        serialMonitorButton.setText("Launch Serial Monitor");
        serialMonitorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialMonitorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator1))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(154, 154, 154))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(destHostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(slaveNodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(customMessageButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(readFloatButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(asciiReadButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(u16ReadButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(u32ReadButton))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(250, 250, 250)
                                        .addComponent(transmitPacketButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(registerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(transactionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(protoIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(byteSwapCheckbox)
                                .addGap(18, 18, 18)
                                .addComponent(wordSwapCheckbox))
                            .addComponent(responseField))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tcpMsgButton)
                                .addGap(18, 18, 18)
                                .addComponent(rtuMsgButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comPortSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel13))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addGap(18, 18, 18)
                                        .addComponent(paritySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(baudRateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(serialMonitorButton))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tcpMsgButton)
                    .addComponent(rtuMsgButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comPortSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(baudRateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(paritySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serialMonitorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(destHostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(slaveNodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transactionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(registerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(protoIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readFloatButton)
                    .addComponent(customMessageButton)
                    .addComponent(asciiReadButton)
                    .addComponent(u16ReadButton)
                    .addComponent(u32ReadButton))
                .addGap(30, 30, 30)
                .addComponent(transmitPacketButton)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(byteSwapCheckbox)
                    .addComponent(wordSwapCheckbox))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(responseField)
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void destHostFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destHostFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destHostFieldActionPerformed

    private void transactionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transactionFieldActionPerformed

    private void transmitPacketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transmitPacketButtonActionPerformed
        //todo no thread dispatched when this action is performed which causes the UI to freeze for a few seconds
        lastResponse = null;
        int slaveNode = Integer.parseInt(slaveNodeField.getText());
        int register = Integer.parseInt(registerField.getText());
        int functionCode = 0;
        int quantity = 0;
        int transactionId = 1;
        int protocolId = 0;
        if (customMessageButton.isSelected())
        {
            functionCode = Integer.parseInt(functionCodeField.getText());
            transactionId = Integer.parseInt(transactionField.getText());
            protocolId = Integer.parseInt(protoIdField.getText());
            quantity = Integer.parseInt(quantityField.getText());
        }
        
        if (!customMessageButton.isSelected())
        {
            if (functionSelector.getSelectedItem().equals("Read Holding Registers (0x03)"))
            {
                functionCode = ModbusMechanic.HOLDING_REGISTER_CODE;
            }
            else if (functionSelector.getSelectedItem().equals("Read Input Registers (0x04)"))
            {
                functionCode = ModbusMechanic.INPUT_REGISTER_CODE;
            }
        }
        lastFunctionCode = functionCode;
        quantity = Integer.parseInt(quantityField.getText());
        if (rtuMsgButton.isSelected())
        {
            try
            {
                lastResponse = ModbusMechanic.generateModbusRTURequest(comPortSelector.getItemAt(comPortSelector.getSelectedIndex()), Integer.parseInt(baudRateSelector.getItemAt(baudRateSelector.getSelectedIndex())), 8, 1, paritySelector.getSelectedIndex(), slaveNode, functionCode, register, quantity);
            }
            catch (Exception e)
            {
                handleModbusException(e);
            }
        }
        if (tcpMsgButton.isSelected())
        {
            try
            {
                lastResponse = ModbusMechanic.generateModbusTCPRequest(destHostField.getText(), 502, protocolId, transactionId, slaveNode, functionCode, register, quantity);
            }
            catch (Exception e)
            {
                handleModbusException(e);
            }
        }
        //todo: lastResponseType is referenced from the current class, but the response definitions are referenced statically from MM class
        if (readFloatButton.isSelected())
        {
            lastResponseType = ModbusMechanic.RESPONSE_TYPE_FLOAT;
        }
        if (asciiReadButton.isSelected())
        {
            lastResponseType = ModbusMechanic.RESPONSE_TYPE_ASCII;
        }
        if (u16ReadButton.isSelected())
        {
            lastResponseType = ModbusMechanic.RESPONSE_TYPE_UINT16;
        }
        if (u32ReadButton.isSelected())
        {
            lastResponseType = ModbusMechanic.RESPONSE_TYPE_UINT32;
        }
        if (customMessageButton.isSelected())
        {
            lastResponseType = ModbusMechanic.RESPONSE_TYPE_RAW;
        }
        if (lastResponse == null)
        {
            clearResponse();
        }
        else
        {
            displayResponse();
            displayRaw();
        }
    }//GEN-LAST:event_transmitPacketButtonActionPerformed

    public byte[] getLastResponseBytes()
    {
        if (lastFunctionCode == ModbusMechanic.HOLDING_REGISTER_CODE)
        {
            //todo all references to the underlying library should be done in the modbus mechanic class
            return ((ReadHoldingRegistersResponse)lastResponse).getBytes();
        }
        if (lastFunctionCode == ModbusMechanic.INPUT_REGISTER_CODE)
        {
            return ((ReadInputRegistersResponse)lastResponse).getBytes();
        }
        return null;
    }
    public void displayResponse()
    {
        byte[] result = getLastResponseBytes();
        if (byteSwapCheckbox.isSelected())
        {
            result = ModbusMechanic.byteSwap(result); 
        }
        if (wordSwapCheckbox.isSelected())
        {
            result = ModbusMechanic.wordSwap(result); 
        }
        if (lastResponseType == ModbusMechanic.RESPONSE_TYPE_ASCII)
        {
            responseField.setText("Response value: " + new String(result));
        }
        if (lastResponseType == ModbusMechanic.RESPONSE_TYPE_FLOAT)
        {
             responseField.setText("Response value: " + DataUtils.toFloat(result));
        }
        if (lastResponseType == ModbusMechanic.RESPONSE_TYPE_UINT16)
        {
             responseField.setText("Response value: " + DataUtils.BeToIntArray(result)[0]);
        }
        if (lastResponseType == ModbusMechanic.RESPONSE_TYPE_UINT32)
        {
             int[] regs = DataUtils.BeToIntArray(result);
             responseField.setText("Response value: " + (((long)regs[0]*65536) + (long)regs[1]));
        }
    }
    public void displayRaw()
    {
        StringBuffer sb = new StringBuffer();
        if (tcpMsgButton.isSelected())
        {
            sb.append("Transaction ID: " + lastResponse.getTransactionId() + "\n");
            sb.append("Protocol ID: " + lastResponse.getProtocolId() + "\n");
        }
        sb.append("Function code: " + lastFunctionCode + "\n");
        sb.append("Words:\n");
        byte[] responseBytes = getLastResponseBytes();
        for (int i = 0; i < responseBytes.length; i = i + 2)
        {
            sb.append(DatatypeConverter.printHexBinary(new byte[] {responseBytes[i], responseBytes[i+1]}) + " ");
            if ((i+2) % 4 == 0)
            {
                sb.append("\n");
            }
        }
        rawTextBox.setText(sb.toString());
    }
    public void clearResponse()
    {
        responseField.setText("Response value: ");
        rawTextBox.setText("");
    }
    public void handleModbusException(Exception e)
    {
            if (e instanceof ModbusProtocolException)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Protocol Error", JOptionPane.ERROR_MESSAGE);
            }
            if (e instanceof ModbusNumberException)
            {
                e.printStackTrace();
            }
            if (e instanceof ModbusIOException)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "IO Error", JOptionPane.ERROR_MESSAGE);
            }
            if (e instanceof Exception)
            {
                e.printStackTrace();
            }
    }
    private void customMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customMessageButtonActionPerformed
        if (customMessageButton.isSelected())
        {
            protoIdField.setEnabled(true);
            transactionField.setEnabled(true);
            quantityField.setEnabled(true);
            functionCodeField.setVisible(true);
            functionSelector.setVisible(false);
        }
    }//GEN-LAST:event_customMessageButtonActionPerformed

    private void readFloatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFloatButtonActionPerformed
        // TODO add your handling code here:
        if (readFloatButton.isSelected())
        {
            protoIdField.setEnabled(false);
            transactionField.setEnabled(false);
            quantityField.setEnabled(false);
            quantityField.setText("2");
            functionCodeField.setVisible(false);
            functionSelector.setVisible(true);
            
        }
        
    }//GEN-LAST:event_readFloatButtonActionPerformed

    private void functionSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_functionSelectorActionPerformed

    private void asciiReadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asciiReadButtonActionPerformed
        // TODO add your handling code here:
        if (asciiReadButton.isSelected())
        {
            protoIdField.setEnabled(false);
            transactionField.setEnabled(false);
            quantityField.setEnabled(true);
            functionCodeField.setVisible(false);
            functionSelector.setVisible(true);
            
        }
    }//GEN-LAST:event_asciiReadButtonActionPerformed

    private void byteSwapCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byteSwapCheckboxActionPerformed
        displayResponse();
    }//GEN-LAST:event_byteSwapCheckboxActionPerformed

    private void wordSwapCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordSwapCheckboxActionPerformed
        displayResponse();
    }//GEN-LAST:event_wordSwapCheckboxActionPerformed

    private void u16ReadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_u16ReadButtonActionPerformed
        if (u16ReadButton.isSelected())
        {
            protoIdField.setEnabled(false);
            transactionField.setEnabled(false);
            quantityField.setEnabled(false);
            quantityField.setText("1");
            functionCodeField.setVisible(false);
            functionSelector.setVisible(true);
        }
    }//GEN-LAST:event_u16ReadButtonActionPerformed

    private void u32ReadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_u32ReadButtonActionPerformed
        if (u32ReadButton.isSelected())
        {
            protoIdField.setEnabled(false);
            transactionField.setEnabled(false);
            quantityField.setEnabled(false);
            quantityField.setText("2");
            functionCodeField.setVisible(false);
            functionSelector.setVisible(true);
        }
    }//GEN-LAST:event_u32ReadButtonActionPerformed

    private void rtuMsgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtuMsgButtonActionPerformed
        if(rtuMsgButton.isSelected())
        {
            destHostField.setEnabled(false);
            protoIdField.setEnabled(false);
            transactionField.setEnabled(false);
        }
    }//GEN-LAST:event_rtuMsgButtonActionPerformed

    private void tcpMsgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcpMsgButtonActionPerformed
        if(tcpMsgButton.isSelected())
        {
            destHostField.setEnabled(true);
        }
    }//GEN-LAST:event_tcpMsgButtonActionPerformed

    private void serialMonitorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialMonitorButtonActionPerformed
        
        SerialParameters serialParameters = new SerialParameters(comPortSelector.getItemAt(comPortSelector.getSelectedIndex()), SerialPort.BaudRate.BAUD_RATE_19200, 8, 1, SerialPort.Parity.NONE);
        SerialUtils.setSerialPortFactory(new SerialPortFactoryJSerialComm());
        SerialPort sp = null;
        ModbusConnection connection = null;
        try
        {
            sp = SerialUtils.createSerial(serialParameters);
            connection = ModbusConnectionFactory.getRTU(sp);
            connection.open();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        new SerialMonitorFrame(connection);
        
    }//GEN-LAST:event_serialMonitorButtonActionPerformed

    private void paritySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paritySelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paritySelectorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton asciiReadButton;
    private javax.swing.JComboBox<String> baudRateSelector;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox byteSwapCheckbox;
    private javax.swing.JComboBox<String> comPortSelector;
    private javax.swing.JRadioButton customMessageButton;
    private javax.swing.JTextField destHostField;
    private javax.swing.JTextField functionCodeField;
    private javax.swing.JComboBox<String> functionSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox<String> paritySelector;
    private javax.swing.JTextField protoIdField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JTextArea rawTextBox;
    private javax.swing.JRadioButton readFloatButton;
    private javax.swing.JTextField registerField;
    private javax.swing.JLabel responseField;
    private javax.swing.JRadioButton rtuMsgButton;
    private javax.swing.JButton serialMonitorButton;
    private javax.swing.JTextField slaveNodeField;
    private javax.swing.JRadioButton tcpMsgButton;
    private javax.swing.JTextField transactionField;
    private javax.swing.JButton transmitPacketButton;
    private javax.swing.JRadioButton u16ReadButton;
    private javax.swing.JRadioButton u32ReadButton;
    private javax.swing.JCheckBox wordSwapCheckbox;
    // End of variables declaration//GEN-END:variables
}
