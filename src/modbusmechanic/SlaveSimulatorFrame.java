/*
 * Copyright 2019 Matt Jamesson <scifidryer@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package modbusmechanic;

/**
 *
 * @author Matt Jamesson <scifidryer@gmail.com>
 */
public class SlaveSimulatorFrame extends javax.swing.JFrame {

    /**
     * Creates new form SlaveSimulatorFrame
     */
    public SlaveSimulatorFrame(int nodeId) {
        initComponents();
        nodeIdLabel.setText("Slave simulator running at address " + nodeId);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        nodeIdLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        registerTypeSelector = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        registerNumberField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dataTypeSelector = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        registerValueField = new javax.swing.JTextField();
        wordSwapCheckbox = new javax.swing.JCheckBox();
        byteSwapCheckbox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        nodeIdLabel.setText("Slave simulator running at node address 1");
        jPanel4.add(nodeIdLabel);

        getContentPane().add(jPanel4);

        jLabel3.setText("Register type");
        jPanel1.add(jLabel3);

        registerTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Input", "Holding" }));
        jPanel1.add(registerTypeSelector);

        jLabel1.setText("Register number");
        jPanel1.add(jLabel1);

        registerNumberField.setColumns(4);
        jPanel1.add(registerNumberField);

        jLabel2.setText("Data type");
        jPanel1.add(jLabel2);

        dataTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Float", "U Int 16", "U Int 32" }));
        jPanel1.add(dataTypeSelector);

        jLabel4.setText("Value");
        jPanel1.add(jLabel4);

        registerValueField.setColumns(5);
        jPanel1.add(registerValueField);

        wordSwapCheckbox.setText("Word Swap");
        wordSwapCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordSwapCheckboxActionPerformed(evt);
            }
        });
        jPanel1.add(wordSwapCheckbox);

        byteSwapCheckbox.setText("Byte Swap");
        jPanel1.add(byteSwapCheckbox);

        getContentPane().add(jPanel1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        getContentPane().add(jPanel2);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jLabel5.setText("Current registers");
        jPanel3.add(jLabel5);

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        ModbusMechanic.stopSlaveSimulator();
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try
        {
            int registerNumber = Integer.parseInt(registerNumberField.getText());
            int functionCode = 0;
            int dataType = 0;
            javax.swing.JLabel functionLabel = null;
            javax.swing.JLabel typeLabel = null;
            javax.swing.JLabel valueLabel = new javax.swing.JLabel("Value: " + registerValueField.getText());
            byte[] buf = null;
            if (dataTypeSelector.getSelectedItem().equals("Float"))
            {
                dataType = ModbusMechanic.DATA_TYPE_FLOAT;
                typeLabel = new javax.swing.JLabel("Type: Float");
                float floatValue = Float.parseFloat(registerValueField.getText());
                buf = java.nio.ByteBuffer.allocate(4).putFloat(floatValue).array();
                if (!wordSwapCheckbox.isSelected())
                {
                    buf = ModbusMechanic.wordSwap(buf);
                }
                if (byteSwapCheckbox.isSelected())
                {
                    buf = ModbusMechanic.byteSwap(buf);
                }
            }
            if (registerTypeSelector.getSelectedItem().equals("Holding"))
            {
                functionLabel = new javax.swing.JLabel("Holding Register " + registerNumber);
                functionCode = 3;
            }
            if (registerTypeSelector.getSelectedItem().equals("Input"))
            {
                functionLabel = new javax.swing.JLabel("Input Register " + registerNumber);
                functionCode = 2;
            }
            ModbusMechanic.setSimulatorRegisterValue(functionCode, registerNumber, buf);
            javax.swing.JPanel registerPanel = new javax.swing.JPanel();
            registerPanel.setLayout(new java.awt.FlowLayout());;
            registerPanel.add(functionLabel);
            registerPanel.add(typeLabel);
            registerPanel.add(valueLabel);
            javax.swing.JButton deleteButton = new javax.swing.JButton("Delete");
            final int aFunctionCode = functionCode;
            final int aRegisterNumber = registerNumber;
            final int aDataType = dataType;
            javax.swing.JSeparator seperator = new javax.swing.JSeparator();
            deleteButton.addActionListener(new java.awt.event.ActionListener(){
                public void actionPerformed(java.awt.event.ActionEvent e)
                {
                    if (aDataType == 1)
                    {
                        ModbusMechanic.setSimulatorRegisterValue(aFunctionCode,aRegisterNumber, new byte[] {0,0,0,0});
                        
                    }
                    java.awt.Component[] components = getContentPane().getComponents();
                    for (int i = 0; i < components.length; i++)
                    {
                        if (components[i] == registerPanel || components[i] == seperator)
                        {
                            getContentPane().remove(components[i]);
                        }
                    }
                    pack();
                }
            });
            registerPanel.add(deleteButton);
            getContentPane().add(seperator);
            getContentPane().add(registerPanel);
            pack();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void wordSwapCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordSwapCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wordSwapCheckboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox byteSwapCheckbox;
    private javax.swing.JComboBox<String> dataTypeSelector;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel nodeIdLabel;
    private javax.swing.JTextField registerNumberField;
    private javax.swing.JComboBox<String> registerTypeSelector;
    private javax.swing.JTextField registerValueField;
    private javax.swing.JCheckBox wordSwapCheckbox;
    // End of variables declaration//GEN-END:variables
}
