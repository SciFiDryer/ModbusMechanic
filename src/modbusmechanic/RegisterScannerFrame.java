/*
 * Copyright 2023 Matt Jamesson <scifidryer@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package modbusmechanic;

import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import com.intelligt.modbus.jlibmodbus.msg.base.ModbusResponse;
import com.intelligt.modbus.jlibmodbus.msg.response.ReadHoldingRegistersResponse;
import com.intelligt.modbus.jlibmodbus.msg.response.ReadInputRegistersResponse;
import com.intelligt.modbus.jlibmodbus.utils.DataUtils;
import com.intelligt.modbus.jlibmodbus.exception.ModbusIOException;

/**
 *
 * @author Matt Jamesson <scifidryer@gmail.com>
 */
public class RegisterScannerFrame extends javax.swing.JFrame {

    ProgressMonitor pm = null;
    DefaultTableModel model = null;
    Object[] registers = null;
    /**
     * Creates new form RegisterScannerFrame
     */
    public RegisterScannerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tcpMsgButton = new javax.swing.JRadioButton();
        rtuMsgButton = new javax.swing.JRadioButton();
        displayTtySerial = new javax.swing.JCheckBox();
        serialPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        comPortSelector = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        baudRateSelector = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        dataBitsField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        stopBitsField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        paritySelector = new javax.swing.JComboBox<>();
        modbusPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        destHostField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        slaveNodeField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        functionSelector = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        startRegisterField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        endRegisterField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        responseTimeoutField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        hideZeroValCheckbox = new javax.swing.JCheckBox();
        byteSwapCheckbox = new javax.swing.JCheckBox();
        wordSwapCheckbox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        registerTable = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setText("Type:");
        jPanel2.add(jLabel1);

        buttonGroup1.add(tcpMsgButton);
        tcpMsgButton.setSelected(true);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("modbusmechanic/Bundle"); // NOI18N
        tcpMsgButton.setText(bundle.getString("PacketFrame.tcpMsgButton.text")); // NOI18N
        tcpMsgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcpMsgButtonActionPerformed(evt);
            }
        });
        jPanel2.add(tcpMsgButton);

        buttonGroup1.add(rtuMsgButton);
        rtuMsgButton.setText(bundle.getString("PacketFrame.rtuMsgButton.text")); // NOI18N
        rtuMsgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtuMsgButtonActionPerformed(evt);
            }
        });
        jPanel2.add(rtuMsgButton);

        displayTtySerial.setText(bundle.getString("PacketFrame.displayTtySerial.text")); // NOI18N
        displayTtySerial.setEnabled(false);
        displayTtySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTtySerialActionPerformed(evt);
            }
        });
        jPanel2.add(displayTtySerial);

        jPanel1.add(jPanel2);

        jLabel14.setText(bundle.getString("PacketFrame.jLabel14.text")); // NOI18N
        serialPanel.add(jLabel14);

        jLabel12.setText(bundle.getString("PacketFrame.jLabel12.text")); // NOI18N
        serialPanel.add(jLabel12);

        comPortSelector.setModel(getPortNames());
        comPortSelector.setEnabled(false);
        comPortSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comPortSelectorActionPerformed(evt);
            }
        });
        serialPanel.add(comPortSelector);

        jLabel13.setText(bundle.getString("PacketFrame.jLabel13.text")); // NOI18N
        serialPanel.add(jLabel13);

        baudRateSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4800", "9600", "14400", "19200", "38400", "57600", "115200" }));
        baudRateSelector.setEnabled(false);
        serialPanel.add(baudRateSelector);

        jLabel15.setText(bundle.getString("PacketFrame.jLabel15.text")); // NOI18N
        serialPanel.add(jLabel15);

        dataBitsField.setColumns(2);
        dataBitsField.setText(bundle.getString("PacketFrame.dataBitsField.text")); // NOI18N
        dataBitsField.setEnabled(false);
        serialPanel.add(dataBitsField);

        jLabel16.setText(bundle.getString("PacketFrame.jLabel16.text")); // NOI18N
        serialPanel.add(jLabel16);

        stopBitsField.setColumns(2);
        stopBitsField.setText(bundle.getString("PacketFrame.stopBitsField.text")); // NOI18N
        stopBitsField.setEnabled(false);
        serialPanel.add(stopBitsField);

        jLabel17.setText(bundle.getString("PacketFrame.jLabel17.text")); // NOI18N
        serialPanel.add(jLabel17);

        paritySelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Odd", "Even", "Mark", "Space" }));
        paritySelector.setEnabled(false);
        paritySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paritySelectorActionPerformed(evt);
            }
        });
        serialPanel.add(paritySelector);

        jPanel1.add(serialPanel);

        modbusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText(bundle.getString("PacketFrame.jLabel1.text")); // NOI18N
        modbusPanel.add(jLabel2);

        destHostField.setColumns(12);
        destHostField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destHostFieldActionPerformed(evt);
            }
        });
        modbusPanel.add(destHostField);

        jLabel18.setText(bundle.getString("PacketFrame.jLabel18.text")); // NOI18N
        modbusPanel.add(jLabel18);

        portField.setColumns(3);
        portField.setText(bundle.getString("PacketFrame.portField.text")); // NOI18N
        portField.setToolTipText(bundle.getString("PacketFrame.portField.toolTipText")); // NOI18N
        modbusPanel.add(portField);

        jLabel3.setText(bundle.getString("PacketFrame.jLabel2.text")); // NOI18N
        modbusPanel.add(jLabel3);

        slaveNodeField.setColumns(3);
        slaveNodeField.setText("1");
        modbusPanel.add(slaveNodeField);

        jLabel5.setText(bundle.getString("PacketFrame.jLabel5.text")); // NOI18N
        modbusPanel.add(jLabel5);

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        functionSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Holding registers", "Input registers" }));
        functionSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionSelectorActionPerformed(evt);
            }
        });
        jLayeredPane1.add(functionSelector, "card2");

        modbusPanel.add(jLayeredPane1);

        jPanel1.add(modbusPanel);

        jLabel4.setText("Start register:");
        jPanel5.add(jLabel4);

        startRegisterField.setColumns(3);
        startRegisterField.setText("0");
        jPanel5.add(startRegisterField);

        jLabel6.setText("End register:");
        jPanel5.add(jLabel6);

        endRegisterField.setColumns(4);
        endRegisterField.setText("65535");
        jPanel5.add(endRegisterField);

        jLabel7.setText("Response timeout (ms):");
        jPanel5.add(jLabel7);

        responseTimeoutField.setColumns(4);
        responseTimeoutField.setText("100");
        jPanel5.add(responseTimeoutField);

        jPanel1.add(jPanel5);

        jLabel9.setText(bundle.getString("PacketFrame.jLabel9.text")); // NOI18N
        jPanel7.add(jLabel9);

        hideZeroValCheckbox.setText("Hide zero value registers");
        hideZeroValCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideZeroValCheckboxActionPerformed(evt);
            }
        });
        jPanel7.add(hideZeroValCheckbox);

        byteSwapCheckbox.setText(bundle.getString("PacketFrame.byteSwapCheckbox.text")); // NOI18N
        byteSwapCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byteSwapCheckboxActionPerformed(evt);
            }
        });
        jPanel7.add(byteSwapCheckbox);

        wordSwapCheckbox.setText(bundle.getString("PacketFrame.wordSwapCheckbox.text")); // NOI18N
        wordSwapCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordSwapCheckboxActionPerformed(evt);
            }
        });
        jPanel7.add(wordSwapCheckbox);

        jPanel1.add(jPanel7);

        jButton1.setText("Scan");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);

        jPanel1.add(jPanel4);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        registerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(registerTable);

        jPanel6.add(jScrollPane1);

        getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public boolean hasTtyPorts = false;
    private DefaultComboBoxModel getPortNames()
    {
        String[] portNames =  ModbusMechanic.getPortNames();
        for (int i = 0; !hasTtyPorts && i < portNames.length; i++)
        {
            if (portNames[i].toLowerCase().startsWith("ttys"))
            {
                hasTtyPorts = true;
            }
        }
        displayTtySerial.setVisible(hasTtyPorts);
        if (hasTtyPorts && !displayTtySerial.isSelected())
        {
            ArrayList<String> filteredPorts = new ArrayList();
            for (int i = 0; i < portNames.length; i++)
            {
                if (!portNames[i].toLowerCase().startsWith("ttys"))
                {
                    filteredPorts.add(portNames[i]);
                }
            }
            return new DefaultComboBoxModel(filteredPorts.toArray());
        }
        return new DefaultComboBoxModel(portNames);
    }
    public void fireSelectionEvent()
    {
        if(tcpMsgButton.isSelected())
        {
            comPortSelector.setEnabled(false);
            baudRateSelector.setEnabled(false);
            dataBitsField.setEnabled(false);
            stopBitsField.setEnabled(false);
            paritySelector.setEnabled(false);
            destHostField.setEnabled(true);
            portField.setEnabled(true);
            displayTtySerial.setEnabled(false);
        }
        if(rtuMsgButton.isSelected())
        {
            comPortSelector.setEnabled(true);
            baudRateSelector.setEnabled(true);
            dataBitsField.setEnabled(true);
            stopBitsField.setEnabled(true);
            paritySelector.setEnabled(true);
            destHostField.setEnabled(false);
            portField.setEnabled(false);
            displayTtySerial.setEnabled(true);
        }
    }
    private void tcpMsgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcpMsgButtonActionPerformed
        fireSelectionEvent();
    }//GEN-LAST:event_tcpMsgButtonActionPerformed

    private void rtuMsgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtuMsgButtonActionPerformed
        fireSelectionEvent();
    }//GEN-LAST:event_rtuMsgButtonActionPerformed

    private void comPortSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comPortSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comPortSelectorActionPerformed

    private void paritySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paritySelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paritySelectorActionPerformed

    private void destHostFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destHostFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destHostFieldActionPerformed

    private void functionSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionSelectorActionPerformed

    }//GEN-LAST:event_functionSelectorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try
        {
            pm = new ProgressMonitor(this,"Scanning", "", 0, 65535);
            new ScanThread().start();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    class ScanThread extends Thread
    {
        public void run()
            {
                registers = new Object[65536];
                int startIndex = 0;
                int endIndex = 65535;
                AbstractModbusMaster master = null;
                try
                {
                    if (!rtuMsgButton.isSelected())
                    {
                        master = new ModbusTCPMaster(destHostField.getText(), Integer.parseInt(portField.getText()));
                    }
                    else
                    {
                        master = new ModbusRTUMaster(comPortSelector.getItemAt(comPortSelector.getSelectedIndex()), Integer.parseInt(baudRateSelector.getItemAt(baudRateSelector.getSelectedIndex())), Integer.parseInt(dataBitsField.getText()), Integer.parseInt(stopBitsField.getText()), paritySelector.getSelectedIndex());
                    }
                }
                catch(Exception e)
                {
                    if (ModbusMechanic.debug)
                    {
                        e.printStackTrace();
                    }
                }
                if (master != null)
                {
                    int responseTimeout = 100;
                    try
                    {
                        responseTimeout = Integer.parseInt(responseTimeoutField.getText());
                    }
                    catch (Exception e)
                    {
                        if (ModbusMechanic.debug)
                        {
                            e.printStackTrace();
                        }
                    }
                    master.setResponseTimeout(responseTimeout);
                    try
                    {
                        startIndex = Integer.parseInt(startRegisterField.getText());
                    }
                    catch(Exception e)
                    {
                        if (ModbusMechanic.debug)
                        {
                            e.printStackTrace();
                        }
                    }
                    try
                    {
                        endIndex = Integer.parseInt(endRegisterField.getText());
                    }
                    catch(Exception e)
                    {
                        if (ModbusMechanic.debug)
                        {
                            e.printStackTrace();
                        }
                    }
                    int total = endIndex - startIndex;
                    pm.setMaximum(total);
                    int count = 0;
                    int transactionId = 0;
                    for (int i = 0; i < 65536 && !pm.isCanceled(); i++)
                    {
                        if (i >= startIndex && i <= endIndex)
                        {
                            try
                            {
                                if (functionSelector.getSelectedIndex() == 0)
                                {
                                    ReadHoldingRegistersResponse response = (ReadHoldingRegistersResponse) master.generateModbusMessage(0, transactionId, Integer.parseInt(slaveNodeField.getText()), 3, i, 1, null);
                                    registers[i] = response.getBytes();
                                }
                                if (functionSelector.getSelectedIndex() == 1)
                                {
                                    ReadInputRegistersResponse response = (ReadInputRegistersResponse) master.generateModbusMessage(0, transactionId, Integer.parseInt(slaveNodeField.getText()), 4, i, 1, null);
                                    registers[i] = response.getBytes();
                                }
                                transactionId++;
                            }
                            catch (Exception e)
                            {
                                if (ModbusMechanic.debug)
                                {
                                    e.printStackTrace();
                                }
                            }
                            pm.setNote("Register " + i);
                            count++;
                            pm.setProgress(count);
                        }
                        
                    }
                    try
                    {
                        master.disconnect();
                    }
                    catch (ModbusIOException e)
                    {
                        if (ModbusMechanic.debug)
                        {
                            e.printStackTrace();
                        }
                    }
                    updateTable();
                }
                
            }
    }
    public void updateTable()
    {
        model = new DefaultTableModel();
        model.addColumn("Register");
        model.addColumn("Value as U16");
        model.addColumn("Value as U32");
        model.addColumn("Value as Float");
        model.addColumn("Value as ASCII");
        for (int i = 0; i < 65536; i++)
        {
            if (registers[i] != null)
            {
                boolean bothZeros = true;
                byte[] currentElement = (byte[])registers[i];
                if (byteSwapCheckbox.isSelected())
                {
                    currentElement = ModbusMechanic.byteSwap(currentElement);
                }
                if (currentElement[0] != 0 || currentElement[1] != 0)
                {
                    bothZeros = false;
                }
                String i16val = "" + (currentElement[0]*256 + currentElement[1]);
                String i32val = "";
                String floatval = "";
                String asciival = new String(currentElement);
                if (i+1 < 65536 && registers[i+1] != null)
                {
                    byte[] nextElement = (byte[])registers[i+1];
                    if (nextElement[0] != 0 || nextElement[1] != 0)
                    {
                        bothZeros = false;
                    }
                    if (byteSwapCheckbox.isSelected())
                    {
                        nextElement = ModbusMechanic.byteSwap(nextElement);
                    }
                    byte[] buf = new byte[4];
                    System.arraycopy(currentElement, 0, buf, 0, 2);
                    System.arraycopy(nextElement, 0, buf, 2, 2);
                    if (wordSwapCheckbox.isSelected())
                    {
                        buf = ModbusMechanic.byteSwap(buf);
                    }
                    i32val = "" + ModbusMechanic.bytesToInt32(buf);
                    floatval = "" + DataUtils.toFloat(buf);
                }
                if (!(bothZeros && hideZeroValCheckbox.isSelected()))
                {
                    model.addRow(new Object[] {"" + i, i16val, i32val, floatval, asciival});
                }
            }
        }
        registerTable.setModel(model);
    }
    private void displayTtySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTtySerialActionPerformed

        comPortSelector.setModel(getPortNames());
    }//GEN-LAST:event_displayTtySerialActionPerformed

    private void byteSwapCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byteSwapCheckboxActionPerformed
        updateTable();
    }//GEN-LAST:event_byteSwapCheckboxActionPerformed

    private void wordSwapCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordSwapCheckboxActionPerformed
        updateTable();
    }//GEN-LAST:event_wordSwapCheckboxActionPerformed

    private void hideZeroValCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideZeroValCheckboxActionPerformed
        updateTable();
    }//GEN-LAST:event_hideZeroValCheckboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterScannerFrame().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> baudRateSelector;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox byteSwapCheckbox;
    private javax.swing.JComboBox<String> comPortSelector;
    private javax.swing.JTextField dataBitsField;
    private javax.swing.JTextField destHostField;
    private javax.swing.JCheckBox displayTtySerial;
    private javax.swing.JTextField endRegisterField;
    private javax.swing.JComboBox<String> functionSelector;
    private javax.swing.JCheckBox hideZeroValCheckbox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel modbusPanel;
    private javax.swing.JComboBox<String> paritySelector;
    private javax.swing.JTextField portField;
    private javax.swing.JTable registerTable;
    private javax.swing.JTextField responseTimeoutField;
    private javax.swing.JRadioButton rtuMsgButton;
    private javax.swing.JPanel serialPanel;
    private javax.swing.JTextField slaveNodeField;
    private javax.swing.JTextField startRegisterField;
    private javax.swing.JTextField stopBitsField;
    private javax.swing.JRadioButton tcpMsgButton;
    private javax.swing.JCheckBox wordSwapCheckbox;
    // End of variables declaration//GEN-END:variables
}
